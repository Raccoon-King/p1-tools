#!/bin/bash
set -euo pipefail

# P1 Dev Guard Pre-commit Hook
# Fast checks for immediate feedback during development

echo "🔍 P1 Dev Guard: Running pre-commit checks..."

# Load configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
if [[ -f "${SCRIPT_DIR}/make/.env" ]]; then
    source "${SCRIPT_DIR}/make/.env"
fi

FAILED=0

# Check 1: YAML Syntax Validation
echo "📝 Checking YAML syntax..."
if command -v yamllint >/dev/null 2>&1; then
    if find . -name "*.yaml" -o -name "*.yml" | xargs yamllint --config-data '{extends: default, rules: {line-length: {max: 120}, indentation: {spaces: 2}}}'; then
        echo "✅ YAML syntax valid"
    else
        echo "❌ YAML syntax errors found"
        FAILED=1
    fi
else
    echo "⚠️  yamllint not found - skipping YAML validation"
fi

# Check 2: Helm Values Schema Existence
echo "📋 Checking for Helm values schema..."
HELM_CHART_PATH="${HELM_CHART_PATH:-helm/sample-app}"
if [[ -d "${HELM_CHART_PATH}" ]]; then
    if [[ -f "${HELM_CHART_PATH}/values.schema.json" ]]; then
        echo "✅ values.schema.json found"
    else
        echo "❌ ${HELM_CHART_PATH}/values.schema.json not found"
        echo "   Generate schema with: helm schema-gen values.yaml > values.schema.json"
        FAILED=1
    fi
else
    echo "⚠️  Helm chart directory ${HELM_CHART_PATH} not found - skipping schema check"
fi

# Check 3: No secrets in staged files
echo "🔒 Scanning for secrets in staged files..."
if command -v git >/dev/null 2>&1; then
    # Get list of staged files
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

    if [[ -n "${STAGED_FILES}" ]]; then
        # Basic secret patterns
        SECRET_PATTERNS=(
            "password\s*=\s*['\"][^'\"]*['\"]"
            "api[_-]?key\s*=\s*['\"][^'\"]*['\"]"
            "secret\s*=\s*['\"][^'\"]*['\"]"
            "token\s*=\s*['\"][^'\"]*['\"]"
            "-----BEGIN.*PRIVATE KEY-----"
            "AKIA[0-9A-Z]{16}"  # AWS Access Key
        )

        for file in ${STAGED_FILES}; do
            if [[ -f "${file}" ]]; then
                for pattern in "${SECRET_PATTERNS[@]}"; do
                    if grep -iE "${pattern}" "${file}" >/dev/null 2>&1; then
                        echo "❌ Potential secret found in ${file}"
                        echo "   Pattern: ${pattern}"
                        FAILED=1
                    fi
                done
            fi
        done

        if [[ ${FAILED} -eq 0 ]]; then
            echo "✅ No secrets detected in staged files"
        fi
    else
        echo "✅ No staged files to check"
    fi
fi

# Check 4: Dockerfile best practices (basic check)
echo "🐳 Checking Dockerfile basics..."
if [[ -f "build/Dockerfile" ]]; then
    # Check for FROM scratch or specific base images (not latest)
    if grep -E "^FROM.*:latest" build/Dockerfile >/dev/null 2>&1; then
        echo "❌ Dockerfile uses :latest tag"
        echo "   Use specific version tags for reproducible builds"
        FAILED=1
    else
        echo "✅ No :latest tags found in Dockerfile"
    fi

    # Check for non-root user
    if grep -E "^USER [0-9]+$|^USER [^0]" build/Dockerfile >/dev/null 2>&1; then
        echo "✅ Dockerfile sets non-root user"
    else
        echo "❌ Dockerfile should set non-root USER directive"
        FAILED=1
    fi
else
    echo "⚠️  build/Dockerfile not found - skipping Dockerfile checks"
fi

# Summary
echo ""
if [[ ${FAILED} -eq 0 ]]; then
    echo "✅ All pre-commit checks passed!"
    echo "💡 Run 'make verify' for comprehensive Big Bang compliance checks"
    exit 0
else
    echo "❌ Pre-commit checks failed!"
    echo "🔧 Fix the issues above before committing"
    echo "💡 Use 'git add' to stage fixes, then commit again"
    exit 1
fi